
package igu;

import com.formdev.flatlaf.intellijthemes.materialthemeuilite.FlatMaterialLighterIJTheme;
import java.awt.Color;
import java.math.BigDecimal;
import java.util.ArrayList;
import java.util.List;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import logica.Control;
import logica.Persona;

public class Inicio extends javax.swing.JFrame {

    private Control control;
    private String mySql="MySQL", postgre="PostgreSQL";
    private Persona persona;
    private boolean esEdicion = false;
    
    public Inicio() {
        this.control = new Control ();

        FlatMaterialLighterIJTheme.setup();
        
        initComponents();
        initStyles();
        
        btnGuardar.setEnabled(false);
        btnCrear.setEnabled(false);
        btnActualizar.setEnabled(false);
        btnEliminar.setEnabled(false);
        btnSincronizarDB.setEnabled(false);
                
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        pnlFondo = new javax.swing.JPanel();
        pnlTituloMenuDB = new javax.swing.JPanel();
        lblTituloApp = new javax.swing.JLabel();
        lblDbOn = new javax.swing.JLabel();
        pnlMenuAcciones = new javax.swing.JPanel();
        btnSincronizarDB = new javax.swing.JButton();
        btnPostgreDB = new javax.swing.JButton();
        btnMySqlDB = new javax.swing.JButton();
        btnEliminar = new javax.swing.JButton();
        btnActualizar = new javax.swing.JButton();
        btnCrear = new javax.swing.JButton();
        btnGuardar = new javax.swing.JButton();
        pnlInfo = new javax.swing.JPanel();
        scrDatos = new javax.swing.JScrollPane();
        tblDatos = new javax.swing.JTable();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        pnlFondo.setBackground(new java.awt.Color(255, 255, 255));

        pnlTituloMenuDB.setBackground(new java.awt.Color(0, 51, 102));

        lblTituloApp.setText("Proyecto 3");

        javax.swing.GroupLayout pnlTituloMenuDBLayout = new javax.swing.GroupLayout(pnlTituloMenuDB);
        pnlTituloMenuDB.setLayout(pnlTituloMenuDBLayout);
        pnlTituloMenuDBLayout.setHorizontalGroup(
            pnlTituloMenuDBLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlTituloMenuDBLayout.createSequentialGroup()
                .addGap(36, 36, 36)
                .addComponent(lblTituloApp, javax.swing.GroupLayout.PREFERRED_SIZE, 161, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(lblDbOn, javax.swing.GroupLayout.PREFERRED_SIZE, 161, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(156, 156, 156))
        );
        pnlTituloMenuDBLayout.setVerticalGroup(
            pnlTituloMenuDBLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlTituloMenuDBLayout.createSequentialGroup()
                .addGap(34, 34, 34)
                .addGroup(pnlTituloMenuDBLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblTituloApp, javax.swing.GroupLayout.PREFERRED_SIZE, 38, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblDbOn, javax.swing.GroupLayout.PREFERRED_SIZE, 38, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(28, Short.MAX_VALUE))
        );

        pnlMenuAcciones.setBackground(new java.awt.Color(235, 235, 237));
        pnlMenuAcciones.setPreferredSize(new java.awt.Dimension(1020, 100));

        btnSincronizarDB.setText("Sincronizar DB");
        btnSincronizarDB.setBorder(null);
        btnSincronizarDB.setBorderPainted(false);
        btnSincronizarDB.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        btnSincronizarDB.setPreferredSize(new java.awt.Dimension(110, 35));
        btnSincronizarDB.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSincronizarDBActionPerformed(evt);
            }
        });

        btnPostgreDB.setText("PostgreSQL DB");
        btnPostgreDB.setBorder(null);
        btnPostgreDB.setBorderPainted(false);
        btnPostgreDB.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        btnPostgreDB.setPreferredSize(new java.awt.Dimension(110, 35));
        btnPostgreDB.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnPostgreDBActionPerformed(evt);
            }
        });

        btnMySqlDB.setText("MySQL DB");
        btnMySqlDB.setBorder(null);
        btnMySqlDB.setBorderPainted(false);
        btnMySqlDB.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        btnMySqlDB.setPreferredSize(new java.awt.Dimension(110, 35));
        btnMySqlDB.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnMySqlDBActionPerformed(evt);
            }
        });

        btnEliminar.setText("Eliminar");
        btnEliminar.setBorder(null);
        btnEliminar.setBorderPainted(false);
        btnEliminar.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        btnEliminar.setPreferredSize(new java.awt.Dimension(110, 35));
        btnEliminar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnEliminarActionPerformed(evt);
            }
        });

        btnActualizar.setText("Actualizar");
        btnActualizar.setBorder(null);
        btnActualizar.setBorderPainted(false);
        btnActualizar.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        btnActualizar.setPreferredSize(new java.awt.Dimension(110, 35));
        btnActualizar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnActualizarActionPerformed(evt);
            }
        });

        btnCrear.setForeground(new java.awt.Color(51, 51, 51));
        btnCrear.setText("Crear");
        btnCrear.setBorder(null);
        btnCrear.setBorderPainted(false);
        btnCrear.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        btnCrear.setPreferredSize(new java.awt.Dimension(110, 35));
        btnCrear.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCrearActionPerformed(evt);
            }
        });

        btnGuardar.setText("Guardar");
        btnGuardar.setBorder(null);
        btnGuardar.setBorderPainted(false);
        btnGuardar.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        btnGuardar.setPreferredSize(new java.awt.Dimension(110, 35));
        btnGuardar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnGuardarActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout pnlMenuAccionesLayout = new javax.swing.GroupLayout(pnlMenuAcciones);
        pnlMenuAcciones.setLayout(pnlMenuAccionesLayout);
        pnlMenuAccionesLayout.setHorizontalGroup(
            pnlMenuAccionesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, pnlMenuAccionesLayout.createSequentialGroup()
                .addGap(34, 34, 34)
                .addComponent(btnCrear, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(btnActualizar, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(btnGuardar, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(btnEliminar, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 91, Short.MAX_VALUE)
                .addComponent(btnMySqlDB, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(btnPostgreDB, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(btnSincronizarDB, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(35, 35, 35))
        );
        pnlMenuAccionesLayout.setVerticalGroup(
            pnlMenuAccionesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlMenuAccionesLayout.createSequentialGroup()
                .addGap(32, 32, 32)
                .addGroup(pnlMenuAccionesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnPostgreDB, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnSincronizarDB, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnMySqlDB, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnActualizar, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnCrear, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnGuardar, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnEliminar, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(33, Short.MAX_VALUE))
        );

        pnlInfo.setBackground(new java.awt.Color(255, 255, 255));

        tblDatos.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {

            }
        ));
        scrDatos.setViewportView(tblDatos);

        javax.swing.GroupLayout pnlInfoLayout = new javax.swing.GroupLayout(pnlInfo);
        pnlInfo.setLayout(pnlInfoLayout);
        pnlInfoLayout.setHorizontalGroup(
            pnlInfoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(scrDatos)
        );
        pnlInfoLayout.setVerticalGroup(
            pnlInfoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlInfoLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(scrDatos)
                .addGap(7, 7, 7))
        );

        javax.swing.GroupLayout pnlFondoLayout = new javax.swing.GroupLayout(pnlFondo);
        pnlFondo.setLayout(pnlFondoLayout);
        pnlFondoLayout.setHorizontalGroup(
            pnlFondoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(pnlTituloMenuDB, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(pnlMenuAcciones, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(pnlInfo, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        pnlFondoLayout.setVerticalGroup(
            pnlFondoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlFondoLayout.createSequentialGroup()
                .addComponent(pnlTituloMenuDB, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, 0)
                .addComponent(pnlMenuAcciones, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, 0)
                .addComponent(pnlInfo, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(pnlFondo, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(pnlFondo, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void btnActualizarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnActualizarActionPerformed
        this.esEdicion = true;
        // Obtener la fila seleccionada en la tabla
        int selectedRow = tblDatos.getSelectedRow();

        // Verificar si hay una fila seleccionada
        if (selectedRow != -1) {
            // Permitir la edición de la fila seleccionada
            habilitarEdicionFila(selectedRow);
            btnGuardar.setEnabled(true);
            btnSincronizarDB.setEnabled(false);
            btnCrear.setEnabled(false);
            btnActualizar.setEnabled(false);
            btnMySqlDB.setEnabled(false);
            btnPostgreDB.setEnabled(false);
            
        } else {
            // No hay fila seleccionada, mostrar mensaje
            javax.swing.JOptionPane.showMessageDialog(this, "Debe seleccionar una fila para actualizar.", "AVISO", javax.swing.JOptionPane.INFORMATION_MESSAGE);
        }
    }//GEN-LAST:event_btnActualizarActionPerformed

    private void btnGuardarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnGuardarActionPerformed
                                          
        // Obtener la fila seleccionada en la tabla
        int selectedRow = tblDatos.getSelectedRow();

        if (selectedRow != -1) {
            // Crear una instancia de Persona con los datos editados en la fila seleccionada
            Persona personaEditada = obtenerDatosFila(selectedRow);

            // Verificar si todos los campos de texto están llenos
            if (personaEditada.getDpi() == 0
                || personaEditada.getNombre1() == null || personaEditada.getNombre1().trim().isEmpty()
                || personaEditada.getNombre2() == null || personaEditada.getNombre2().trim().isEmpty()
                || personaEditada.getApellido1() == null || personaEditada.getApellido1().trim().isEmpty()
                || personaEditada.getApellido2() == null || personaEditada.getApellido2().trim().isEmpty()
                || personaEditada.getDireccionDomicilio() == null || personaEditada.getDireccionDomicilio().trim().isEmpty()) {
                javax.swing.JOptionPane.showMessageDialog(this, "Debe llenar todos los campos de texto.", "AVISO", javax.swing.JOptionPane.INFORMATION_MESSAGE);
                return;
            }

            // Verificar si los campos numéricos son válidos
            if ("".equals(personaEditada.getTelefonoDomicilio()) || "".equals(personaEditada.getTelefonoMovil())) {
                javax.swing.JOptionPane.showMessageDialog(this, "Debe ingresar números válidos para los teléfonos.", "AVISO", javax.swing.JOptionPane.INFORMATION_MESSAGE);
                return;
            }

            if (personaEditada.getSalarioBase() == null || personaEditada.getSalarioBase().compareTo(BigDecimal.ZERO) <= 0 
                || personaEditada.getBonificacion() == null || personaEditada.getBonificacion().compareTo(BigDecimal.ZERO) <= 0) {
                javax.swing.JOptionPane.showMessageDialog(this, "Debe ingresar un salario y bonificación válidos.", "AVISO", javax.swing.JOptionPane.INFORMATION_MESSAGE);
                return;
            }

            // Obtener el tipo de base de datos del label
            String tipoDB = lblDbOn.getText();

            // Llamar a la capa de control para actualizar o crear la persona
            if (esEdicion) { // Suponiendo que tienes una variable booleana esEdicion para identificar si es actualización
                control.actualizarPersona(personaEditada, tipoDB);
                javax.swing.JOptionPane.showMessageDialog(this, "Los cambios han sido guardados exitosamente.");
            } else {
                Boolean valor = control.crearPersona(personaEditada, tipoDB);
               
                if(valor){
                    javax.swing.JOptionPane.showMessageDialog(this, "La nueva persona ha sido creada exitosamente.");
                }else{
                    javax.swing.JOptionPane.showMessageDialog(this, "El DPI ya existe.");
                }
                
            }

            // Deshabilitar la edición
            deshabilitarEdicion();
            btnGuardar.setEnabled(false);
            btnSincronizarDB.setEnabled(true);
            btnCrear.setEnabled(true);
            btnActualizar.setEnabled(true);
            cargarTabla(lblDbOn.getText());

            // Habilitar botones según la base de datos seleccionada
            if (mySql.equals(lblDbOn.getText())) {
                btnPostgreDB.setEnabled(true);
            } else {
                btnMySqlDB.setEnabled(true);
            }
        } else {
            // No hay fila seleccionada, mostrar mensaje
            javax.swing.JOptionPane.showMessageDialog(this, "No hay fila seleccionada para guardar.", "AVISO", javax.swing.JOptionPane.INFORMATION_MESSAGE);
        }

    }//GEN-LAST:event_btnGuardarActionPerformed

    private void btnMySqlDBActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnMySqlDBActionPerformed
        cargarTabla(mySql);
        lblDbOn.setText(mySql);
        btnMySqlDB.setEnabled(false);
        btnPostgreDB.setEnabled(true);
        btnCrear.setEnabled(true);
        btnActualizar.setEnabled(true);
        btnEliminar.setEnabled(true);
        btnSincronizarDB.setEnabled(true);
    }//GEN-LAST:event_btnMySqlDBActionPerformed

    private void btnPostgreDBActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnPostgreDBActionPerformed
        cargarTabla(postgre);
        lblDbOn.setText(postgre);
        btnMySqlDB.setEnabled(true);
        btnPostgreDB.setEnabled(false);
        btnCrear.setEnabled(true);
        btnActualizar.setEnabled(true);
        btnEliminar.setEnabled(true);
        btnSincronizarDB.setEnabled(true);
    }//GEN-LAST:event_btnPostgreDBActionPerformed

    private void btnCrearActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCrearActionPerformed
        this.esEdicion = false; // Establece que estás en modo de creación
        DefaultTableModel modelo = (DefaultTableModel) tblDatos.getModel();
    // Agregar una nueva fila vacía al final de la tabla
    modelo.addRow(new Object[] { "", "", "", "", "", "", "", "", BigDecimal.ZERO, BigDecimal.ZERO });
    
    // Seleccionar la última fila (la nueva fila vacía)
    int newRow = modelo.getRowCount() - 1;
    tblDatos.setRowSelectionInterval(newRow, newRow);

    // Habilitar la edición solo en la nueva fila
    habilitarEdicion(newRow);
    btnGuardar.setEnabled(true);
    btnSincronizarDB.setEnabled(false);
    btnCrear.setEnabled(false);
    btnActualizar.setEnabled(false);
    btnMySqlDB.setEnabled(false);
    btnPostgreDB.setEnabled(false);
    }//GEN-LAST:event_btnCrearActionPerformed

    private void btnSincronizarDBActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSincronizarDBActionPerformed
        control.sincronizar2DB(obtenerListaPersonasDeTabla());
        cargarTabla(lblDbOn.getText());
    }//GEN-LAST:event_btnSincronizarDBActionPerformed

    private void btnEliminarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnEliminarActionPerformed
        control.eliminarPersona(borrarFilaSeleccionada(), lblDbOn.getText());
        btnGuardar.setEnabled(false);
        cargarTabla(lblDbOn.getText());
        btnSincronizarDB.setEnabled(true);
        btnCrear.setEnabled(true);
        btnActualizar.setEnabled(true);
        cargarTabla(lblDbOn.getText());
        if (mySql.equals(lblDbOn.getText())) {
                btnPostgreDB.setEnabled(true);
            } else {
                btnMySqlDB.setEnabled(true);
            }
    }//GEN-LAST:event_btnEliminarActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnActualizar;
    private javax.swing.JButton btnCrear;
    private javax.swing.JButton btnEliminar;
    private javax.swing.JButton btnGuardar;
    private javax.swing.JButton btnMySqlDB;
    private javax.swing.JButton btnPostgreDB;
    private javax.swing.JButton btnSincronizarDB;
    private javax.swing.JLabel lblDbOn;
    private javax.swing.JLabel lblTituloApp;
    private javax.swing.JPanel pnlFondo;
    private javax.swing.JPanel pnlInfo;
    private javax.swing.JPanel pnlMenuAcciones;
    private javax.swing.JPanel pnlTituloMenuDB;
    private javax.swing.JScrollPane scrDatos;
    private javax.swing.JTable tblDatos;
    // End of variables declaration//GEN-END:variables

    private void initStyles() {
        lblTituloApp.putClientProperty( "FlatLaf.styleClass", "h0" );
        lblDbOn.putClientProperty( "FlatLaf.styleClass", "h1" );
        lblTituloApp.setForeground(Color.white);
        lblDbOn.setForeground(Color.white);
        btnActualizar.setForeground(Color.black);
        btnCrear.setForeground(Color.black);
        btnEliminar.setForeground(Color.black);
        btnGuardar.setForeground(Color.black);
        btnMySqlDB.setForeground(Color.black);
        btnPostgreDB.setForeground(Color.black);
        btnSincronizarDB.setForeground(Color.black);
    }
    
    private void cargarTabla(String tipoDB){
        // Limpiar la tabla antes de llenarla
        limpiarTabla();
        // Obtener la lista de personas desde la capa de lógica de negocio
        List<Persona> personas = control.obtenerPersonas(tipoDB);
        llenarTabla(personas);
    }
    
    // Método que convierte la lista de personas en una matriz de objetos
    private Object[][] convertirListaPersonas(List<Persona> personas) {
        Object[][] datos = new Object[personas.size()][10]; // 10 columnas (correspondientes a los campos de Persona)
        for (int i = 0; i < personas.size(); i++) {
            Persona p = personas.get(i);
            datos[i][0] = p.getDpi();
            datos[i][1] = p.getNombre1();
            datos[i][2] = p.getNombre2();
            datos[i][3] = p.getApellido1();
            datos[i][4] = p.getApellido2();
            datos[i][5] = p.getDireccionDomicilio();
            datos[i][6] = p.getTelefonoDomicilio();
            datos[i][7] = p.getTelefonoMovil();
            datos[i][8] = p.getSalarioBase();
            datos[i][9] = p.getBonificacion();
        }
        return datos;
    }

    // Método para llenar la tabla con la lista de personas
    private void llenarTabla(List<Persona> personas) {
        // Convertir la lista en un arreglo bidimensional de objetos
        Object[][] datosPersonas = convertirListaPersonas(personas);

        // Nombres de las columnas
        String[] columnas = { "DPI", "Nombre1", "Nombre2", "Apellido1", "Apellido2", "Dirección", "Teléfono Domicilio", "Teléfono Móvil", "Salario Base", "Bonificación" };

        // Crear el modelo de la tabla y establecerlo en la JTable
        DefaultTableModel modeloTabla = new DefaultTableModel(datosPersonas, columnas);
        tblDatos.setModel(modeloTabla);
    }

    private void limpiarTabla() {
        DefaultTableModel modelo = (DefaultTableModel) tblDatos.getModel();
        int rowCount = modelo.getRowCount();

        // Elimina todas las filas del modelo desde la última hasta la primera
        for (int i = rowCount - 1; i >= 0; i--) {
            modelo.removeRow(i);
        }
    }

    private void habilitarEdicionFila(int fila) {
        DefaultTableModel modelo = (DefaultTableModel) tblDatos.getModel();

        // Obtener los nombres de las columnas
        String[] columnas = { "DPI", "Nombre1", "Nombre2", "Apellido1", "Apellido2", "Dirección", "Teléfono Domicilio", "Teléfono Móvil", "Salario Base", "Bonificación" };

        // Convertir el Vector de datos a un arreglo bidimensional de Object
        int rowCount = modelo.getRowCount();
        int columnCount = modelo.getColumnCount();
        Object[][] datos = new Object[rowCount][columnCount];

        for (int i = 0; i < rowCount; i++) {
            for (int j = 0; j < columnCount; j++) {
                datos[i][j] = modelo.getValueAt(i, j);
            }
        }

        // Crear un nuevo modelo para permitir la edición en la fila seleccionada
        tblDatos.setModel(new DefaultTableModel(datos, columnas) {
            @Override
            public boolean isCellEditable(int row, int column) {
                // Permitir la edición solo en la fila seleccionada
                //return row == fila;
                return column != 0;
            }
        });

        tblDatos.repaint();
    }
    
    private void habilitarEdicion(int fila) {
        DefaultTableModel modelo = (DefaultTableModel) tblDatos.getModel();

        // Obtener los nombres de las columnas
        String[] columnas = { "DPI", "Nombre1", "Nombre2", "Apellido1", "Apellido2", "Dirección", 
                              "Teléfono Domicilio", "Teléfono Móvil", "Salario Base", "Bonificación" };

        // Convertir el Vector de datos a un arreglo bidimensional de Object
        int rowCount = modelo.getRowCount();
        int columnCount = modelo.getColumnCount();
        Object[][] datos = new Object[rowCount][columnCount];

        for (int i = 0; i < rowCount; i++) {
            for (int j = 0; j < columnCount; j++) {
                datos[i][j] = modelo.getValueAt(i, j);
            }
        }

        // Crear un nuevo modelo que permita la edición solo en la fila especificada
        tblDatos.setModel(new DefaultTableModel(datos, columnas) {
            @Override
            public boolean isCellEditable(int row, int column) {
                // Permitir la edición solo en la fila especificada
                return row == fila;
            }
        });

        tblDatos.repaint();
    }


    private void deshabilitarEdicion() {
        DefaultTableModel modelo = (DefaultTableModel) tblDatos.getModel();

        // Obtener los nombres de las columnas
        String[] columnas = { "DPI", "Nombre1", "Nombre2", "Apellido1", "Apellido2", 
                              "Dirección", "Teléfono Domicilio", "Teléfono Móvil", 
                              "Salario Base", "Bonificación" };

        // Convertir el Vector de datos a un arreglo bidimensional de Object
        int rowCount = modelo.getRowCount();
        int columnCount = modelo.getColumnCount();
        Object[][] datos = new Object[rowCount][columnCount];

        for (int i = 0; i < rowCount; i++) {
            for (int j = 0; j < columnCount; j++) {
                datos[i][j] = modelo.getValueAt(i, j);
            }
        }

        // Crear un nuevo modelo que no permita edición
        tblDatos.setModel(new DefaultTableModel(datos, columnas) {
            @Override
            public boolean isCellEditable(int row, int column) {
                return false; // No permitir edición en ninguna celda
            }
        });

        tblDatos.repaint();
    }

    // Función para obtener los datos de la fila seleccionada y crear una Persona
    private Persona obtenerDatosFila(int fila) {
        // Obtener los datos de la tabla
        int dpi = Integer.parseInt(tblDatos.getValueAt(fila, 0).toString());
        String nombre1 = tblDatos.getValueAt(fila, 1).toString();
        String nombre2 = tblDatos.getValueAt(fila, 2).toString();
        String apellido1 = tblDatos.getValueAt(fila, 3).toString();
        String apellido2 = tblDatos.getValueAt(fila, 4).toString();
        String direccion = tblDatos.getValueAt(fila, 5).toString();

        // Validación de los teléfonos antes de convertirlos a int
        String telefonoDomicilioStr = tblDatos.getValueAt(fila, 6).toString().trim();

        String telefonoDomicilio = tblDatos.getValueAt(fila, 6).toString();
        String telefonoMovil = tblDatos.getValueAt(fila, 7).toString();
        // Validación de los valores numéricos antes de convertirlos a BigDecimal
        String salarioBaseStr = tblDatos.getValueAt(fila, 8).toString().trim();
        BigDecimal salarioBase = salarioBaseStr.isEmpty() ? BigDecimal.ZERO : new BigDecimal(salarioBaseStr);

        String bonificacionStr = tblDatos.getValueAt(fila, 9).toString().trim();
        BigDecimal bonificacion = bonificacionStr.isEmpty() ? BigDecimal.ZERO : new BigDecimal(bonificacionStr);

        // Crear un objeto Persona con los datos de la fila
        return new Persona(dpi, nombre1, nombre2, apellido1, apellido2, direccion, telefonoDomicilio, telefonoMovil, salarioBase, bonificacion);
    }
    
    // Método para determinar si la fila seleccionada es una nueva fila (vacía)
    private boolean isNewRow(int row) {
        DefaultTableModel modelo = (DefaultTableModel) tblDatos.getModel();
        for (int col = 0; col < modelo.getColumnCount(); col++) {
            if (!modelo.getValueAt(row, col).toString().isEmpty()) {
                return false; // La fila no es nueva si hay datos
            }
        }
        return true; // La fila es nueva si todas las celdas están vacías
    }
    
    // Función para obtener todos los datos de la tabla y devolverlos como una lista de objetos Persona
    private List<Persona> obtenerListaPersonasDeTabla() {
        // Crear una lista para almacenar las personas
        List<Persona> listaPersonas = new ArrayList<>();

        // Obtener el modelo de la tabla
        DefaultTableModel modelo = (DefaultTableModel) tblDatos.getModel();

        // Iterar sobre todas las filas de la tabla
        for (int i = 0; i < modelo.getRowCount(); i++) {
            // Obtener los datos de la fila actual y crear un objeto Persona
            Persona persona = obtenerDatosFila(i);

            // Agregar la persona a la lista
            listaPersonas.add(persona);
        }

        // Retornar la lista de personas
        return listaPersonas;
    }

    // Función para borrar la fila seleccionada y devolver la Persona eliminada
    private Persona borrarFilaSeleccionada() {
        // Obtener el índice de la fila seleccionada
        int filaSeleccionada = tblDatos.getSelectedRow();

        // Verificar si hay una fila seleccionada
        if (filaSeleccionada >= 0) {
            // Obtener la Persona correspondiente a la fila antes de eliminarla
            Persona personaEliminada = obtenerDatosFila(filaSeleccionada);

            // Obtener el modelo de la tabla
            DefaultTableModel modelo = (DefaultTableModel) tblDatos.getModel();

            // Eliminar la fila seleccionada del modelo
            modelo.removeRow(filaSeleccionada);

            // Actualizar la tabla después de eliminar la fila
            tblDatos.repaint();

            // Retornar la persona eliminada
            return personaEliminada;
        } else {
            // Mostrar un mensaje si no hay ninguna fila seleccionada
            JOptionPane.showMessageDialog(null, "Por favor, selecciona una fila para borrar.");
            return null;
        }
    }

}
